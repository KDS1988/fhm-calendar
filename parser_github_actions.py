#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FHM Parser - Enhanced version –¥–ª—è GitHub Actions
–° —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–µ—Å—Å–∏–π –∏ cookies
"""

from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError
from datetime import date, datetime, timedelta
from dotenv import load_dotenv
import json
import os
import time

load_dotenv()

LOGIN_URL = 'http://referee.fhmoscow.com/adm/index.php'
TARGET_URL = 'http://referee.fhmoscow.com/adm/vsporte.php'
LOGIN = os.getenv('FHMO_LOGIN')
PASSWORD = os.getenv('FHMO_PASS')
OUTPUT_FILE = 'matches_data.json'

if not LOGIN or not PASSWORD:
    raise EnvironmentError("‚ùå FHMO_LOGIN –∏ FHMO_PASS –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")


def parse_date_str(date_str):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É DD.MM.YYYY"""
    try:
        d, m, y = map(int, str(date_str).strip().split('.'))
        return date(y, m, d)
    except:
        return None


def main():
    """Enhanced –ø–∞—Ä—Å–∏–Ω–≥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏"""
    with sync_playwright() as p:
        print("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")

        browser = p.chromium.launch(
            headless=True,
            args=[
                '--disable-blink-features=AutomationControlled',
                '--disable-dev-shm-usage',
                '--no-sandbox'
            ]
        )

        # –û–î–ò–ù –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        context = browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            accept_downloads=False,
            java_script_enabled=True,
        )

        page = context.new_page()

        try:
            # === –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ===
            print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
            page.goto(LOGIN_URL, timeout=30000, wait_until='networkidle')
            time.sleep(1)

            page.fill('input[name="login"]', LOGIN)
            page.fill('input[name="password"]', PASSWORD)

            # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
            for selector in ['input[type="submit"]', 'button[type="submit"]', 'form button']:
                try:
                    if page.locator(selector).count() > 0:
                        page.locator(selector).first.click()
                        print(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞: {selector}")
                        break
                except:
                    continue

            # –ñ–¥–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            time.sleep(3)
            print(f"üìç –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞: {page.url}")

            # === –ü–ï–†–ï–•–û–î –ù–ê –ö–ê–õ–ï–ù–î–ê–†–¨ ===
            print("üìÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å...")

            # –í–ê–†–ò–ê–ù–¢ 1: –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥
            try:
                page.goto(TARGET_URL, timeout=30000, wait_until='networkidle')
                time.sleep(2)
                print(f"üìç –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {page.url}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞: {e}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            content = page.content()
            with open('calendar_page.html', 'w', encoding='utf-8') as f:
                f.write(content)
            print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω calendar_page.html")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if '–í—Ö–æ–¥' in content or 'content_user_login' in content:
                print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –Ω–∞ vsporte.php")

                # –í–ê–†–ò–ê–ù–¢ 2: –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ iframe –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies
                cookies = context.cookies()
                print(f"üç™ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ cookies: {len(cookies)}")

                # –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                time.sleep(5)
                page.goto(TARGET_URL, timeout=30000)
                time.sleep(3)
                content = page.content()

            # === –ü–ê–†–°–ò–ù–ì ===
            print("üîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã...")

            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É –ë–ï–ó wait_for_function
            table_found = False
            table_locator = None

            try:
                table_locator = page.locator('//th[contains(., "–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò")]/ancestor::table')
                if table_locator.count() > 0:
                    table_found = True
                    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞!")
            except:
                pass

            # Fallback: –∏—â–µ–º –ª—é–±—É—é –±–æ–ª—å—à—É—é —Ç–∞–±–ª–∏—Ü—É
            if not table_found:
                print("üîç –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...")
                tables = page.locator('table').all()
                print(f"  –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")

                for i, table in enumerate(tables):
                    try:
                        rows = len(table.locator('tr').all())
                        if rows > 10:
                            table_locator = page.locator('table').nth(i)
                            table_found = True
                            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É {i+1} ({rows} —Å—Ç—Ä–æ–∫)")
                            break
                    except:
                        pass

            if not table_found:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                page.screenshot(path='no_table_screenshot.png', full_page=True)

                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π JSON
                with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                    json.dump({
                        'matches': [],
                        'arenas': [],
                        'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                        'total_matches': 0,
                        'error': '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ'
                    }, f, ensure_ascii=False, indent=2)
                print("üíæ –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π JSON")
                return

            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏
            row_locators = table_locator.locator('tr:has(td)').all()
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(row_locators)}")

            today = date.today()
            matches = []

            for idx, row in enumerate(row_locators):
                try:
                    cells = row.locator('td').all()
                    if len(cells) < 8:
                        continue

                    texts = [cell.inner_text().strip() for cell in cells]

                    date_str = texts[1] if len(texts) > 1 else ''
                    match_date = parse_date_str(date_str)

                    if not match_date or match_date <= today:
                        continue

                    team1 = texts[6].split('\n')[0] if len(texts) > 6 else ''
                    team2 = texts[7].split('\n')[0] if len(texts) > 7 else ''
                    pair = f"{team1} ‚Äì {team2}" if team1 and team2 else ""

                    match = {
                        'day': texts[0] if len(texts) > 0 else '',
                        'date': date_str,
                        'tour': texts[2] if len(texts) > 2 else '',
                        'game_num': texts[3] if len(texts) > 3 else '',
                        'time': texts[4] if len(texts) > 4 else '',
                        'year': texts[5] if len(texts) > 5 else '',
                        'pair': pair,
                        'name': texts[7] if len(texts) > 7 else '–ü–µ—Ä–≤–µ–Ω—Å—Ç–≤–æ –ú–æ—Å–∫–≤—ã',
                        'arena': texts[7] if len(texts) > 7 else '',
                        'map': 'https://yandex.ru/maps/',
                        'address': texts[9] if len(texts) > 9 else ''
                    }

                    matches.append(match)

                except Exception as e:
                    continue

            print(f"‚úÖ –°–ø–∞—Ä—Å–µ–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            arenas = sorted(list(set(m['arena'] for m in matches if m['arena'])))

            output = {
                'matches': matches,
                'arenas': arenas,
                'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                'total_matches': len(matches)
            }

            with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                json.dump(output, f, ensure_ascii=False, indent=2)

            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {OUTPUT_FILE}")
            print(f"üìä –ú–∞—Ç—á–µ–π: {len(matches)} | –ê—Ä–µ–Ω: {len(arenas)}")
            print("="*60)
            print("‚úÖ –ì–û–¢–û–í–û!")
            print("="*60)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            try:
                page.screenshot(path='error_screenshot.png', full_page=True)
                with open('error_page.html', 'w', encoding='utf-8') as f:
                    f.write(page.content())
                print("üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã error_screenshot.png –∏ error_page.html")
            except:
                pass

            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π JSON
            try:
                with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                    json.dump({
                        'matches': [],
                        'arenas': [],
                        'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                        'total_matches': 0,
                        'error': str(e)
                    }, f, ensure_ascii=False, indent=2)
                print("üíæ –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π JSON —Å –æ—à–∏–±–∫–æ–π")
            except:
                pass
        finally:
            browser.close()


if __name__ == "__main__":
    main()
