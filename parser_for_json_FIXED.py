#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FHM Parser - Enhanced version –¥–ª—è GitHub Actions
–° —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–µ—Å—Å–∏–π –∏ cookies
"""

from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError
from datetime import date, datetime, timedelta
import json
import os

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
LOGIN_URL = 'http://referee.fhmoscow.com/adm/index.php'
TARGET_URL = 'http://referee.fhmoscow.com/adm/vsporte.php'
LOGIN = os.getenv('FHMO_LOGIN')
PASSWORD = os.getenv('FHMO_PASS')
OUTPUT_FILE = 'matches_data.json'

if not LOGIN or not PASSWORD:
    raise EnvironmentError("‚ùå FHMO_LOGIN –∏ FHMO_PASS –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")


def parse_date_str(date_str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ 1.10.2025 –∏–ª–∏ 01.10.2025"""
    try:
        d, m, y = map(int, str(date_str).strip().split('.'))
        return date(y, m, d)
    except:
        return None


def main():
    with sync_playwright() as p:
        print("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        browser = p.chromium.launch(headless=True)
        context = browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        )
        page = context.new_page()
        
        try:
            print("üîê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...")
            for attempt in range(3):
                try:
                    page.goto(LOGIN_URL, timeout=30000)
                    page.wait_for_load_state('domcontentloaded')
                    print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    break
                except PlaywrightTimeoutError:
                    print(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    if attempt == 2:
                        raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
            
            print("üìù –í–≤–æ–¥–∏–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å...")
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å fill()
            page.locator('input[name="login"]').fill(LOGIN)
            page.locator('input[name="password"]').fill(PASSWORD)
            
            # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏
            print("üñ± –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...")
            button_clicked = False
            selectors = [
                'input[type="submit"]',
                'input[value="–í–æ–π—Ç–∏"]',
                'button[type="submit"]',
                'button:has-text("–í–æ–π—Ç–∏")',
                'button:has-text("–í—Ö–æ–¥")',
                'form button',
                'button >> text="–í–æ–π—Ç–∏"',
                '//input[@type="submit"]',
                '//button[contains(text(), "–í–æ–π—Ç–∏")]',
                '//button[contains(text(), "–í—Ö–æ–¥")]',
                '//button[@type="submit"]',
                '//form//button',
            ]
            
            for selector in selectors:
                try:
                    locator = page.locator(selector)
                    count = locator.count()
                    for i in range(count):
                        if locator.nth(i).is_visible():
                            locator.nth(i).click()
                            print(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞: {selector}")
                            button_clicked = True
                            break
                    if button_clicked:
                        break
                except Exception as e:
                    continue
            
            if not button_clicked:
                print("‚ùå –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                page.screenshot(path="login_page_error.png")
                raise Exception("–ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            page.wait_for_timeout(2000)
            
            print("‚è≥ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ vsporte.php...")
            page.goto(TARGET_URL, timeout=30000)
            page.wait_for_load_state('domcontentloaded')
            
            # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            print("‚è≥ –û–∂–∏–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É '–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò'...")
            page.wait_for_function("""
                () => {
                    const th = Array.from(document.querySelectorAll('th'))
                        .find(el => el.textContent.includes('–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò'));
                    if (!th) return false;
                    const table = th.closest('table');
                    const rows = table.querySelectorAll('tr:has(td)');
                    return rows.length > 0;
                }
            """, timeout=15000)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            table_locator = page.locator('//th[contains(., "–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò")]/ancestor::table')
            row_locators = table_locator.locator('tr:has(td)').all()
            
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏: {len(row_locators)}")
            
            # –ü–∞—Ä—Å–∏–Ω–≥
            data = []
            for row in row_locators:
                cells = row.locator('td').all()
                if len(cells) < 8:
                    continue
                
                texts = [cell.inner_text().strip() for cell in cells]
                pair = " ‚Äì ".join(filter(None, [texts[6], texts[7]])) if len(texts) > 7 else ""
                full_row = texts[:6] + [pair] + texts[8:11]
                
                while len(full_row) < 10:
                    full_row.append("")
                
                data.append(full_row)
            
            print(f"üìã –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(data)}")
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            today = date.today()
            filtered_data = []
            
            for row in data:
                date_str = row[1]
                match_date = parse_date_str(date_str)
                
                if match_date and match_date > today:
                    filtered_data.append(row)
            
            print(f"‚úÖ –û—Ç–æ–±—Ä–∞–Ω–æ {len(filtered_data)} –º–∞—Ç—á–µ–π (–¥–∞—Ç–∞ > {today.strftime('%d.%m.%Y')})")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JSON
            matches = []
            for row in filtered_data:
                match = {
                    'day': row[0],
                    'date': row[1],
                    'tour': row[2],
                    'game_num': row[3],
                    'time': row[4],
                    'year': row[5],
                    'pair': row[6],
                    'name': row[7] if row[7] else '–ü–µ—Ä–≤–µ–Ω—Å—Ç–≤–æ –ú–æ—Å–∫–≤—ã',
                    'arena': row[7] if row[7] else '',
                    'map': row[8] if row[8] else 'https://yandex.ru/maps/',
                    'address': row[9] if len(row) > 9 else ''
                }
                matches.append(match)
            
            # –ê—Ä–µ–Ω—ã
            arenas = sorted(list(set(m['arena'] for m in matches if m['arena'])))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º JSON
            output = {
                'matches': matches,
                'arenas': arenas,
                'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                'total_matches': len(matches)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                json.dump(output, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {OUTPUT_FILE}")
            print(f"üìä –ú–∞—Ç—á–µ–π: {len(matches)} | –ê—Ä–µ–Ω: {len(arenas)}")
            print("="*60)
            print("‚úÖ –ì–û–¢–û–í–û!")
            print("="*60)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            
            try:
                page.screenshot(path="error_screenshot.png")
            except:
                pass
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π JSON
            try:
                with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                    json.dump({
                        'matches': [],
                        'arenas': [],
                        'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                        'total_matches': 0,
                        'error': str(e)
                    }, f, ensure_ascii=False, indent=2)
            except:
                pass
        finally:
            browser.close()


if __name__ == "__main__":
    main()
