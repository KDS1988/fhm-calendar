#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FHM Parser - Enhanced version –¥–ª—è GitHub Actions
–° —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–µ—Å—Å–∏–π –∏ cookies
"""

from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError
from datetime import date, datetime, timedelta
from dotenv import load_dotenv
import json
import os
import time

load_dotenv()

LOGIN_URL = 'http://referee.fhmoscow.com/adm/index.php'
TARGET_URL = 'http://referee.fhmoscow.com/adm/vsporte.php'
LOGIN = os.getenv('FHMO_LOGIN')
PASSWORD = os.getenv('FHMO_PASS')
OUTPUT_FILE = 'matches_data.json'

if not LOGIN or not PASSWORD:
    raise EnvironmentError("‚ùå FHMO_LOGIN –∏ FHMO_PASS –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")


def parse_date_str(date_str):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É DD.MM.YYYY"""
    try:
        d, m, y = map(int, str(date_str).strip().split('.'))
        return date(y, m, d)
    except:
        return None


def main():
    """ULTIMATE –ø–∞—Ä—Å–∏–Ω–≥ - –ø—Ä–æ–±—É–µ–º –í–°–Å"""

    # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à –†–ê–ë–û–ß–ò–ô –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–¥!
    # –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–µ–º –µ–≥–æ –ª–æ–≥–∏–∫—É

    with sync_playwright() as p:
        print("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        browser = p.chromium.launch(headless=True)
        context = browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        )
        page = context.new_page()

        try:
            # === –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø - –ö–ê–ö –í –í–ê–®–ï–ú –†–ê–ë–û–ß–ï–ú –ö–û–î–ï ===
            print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
            for attempt in range(3):
                try:
                    page.goto(LOGIN_URL, timeout=30000)
                    page.wait_for_load_state('domcontentloaded')
                    print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    break
                except PlaywrightTimeoutError:
                    print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3")
                    if attempt == 2:
                        raise

            page.fill('input[name="login"]', LOGIN)
            page.fill('input[name="password"]', PASSWORD)

            # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ - –†–ê–°–®–ò–†–ï–ù–ù–´–ô –°–ü–ò–°–û–ö
            button_clicked = False
            selectors = [
                'input[type="submit"]',
                'input[value="–í–æ–π—Ç–∏"]',
                'button[type="submit"]',
                'button:has-text("–í–æ–π—Ç–∏")',
                'button:has-text("–í—Ö–æ–¥")',
                'form button',
                '//input[@type="submit"]',
                '//button[contains(text(), "–í–æ–π—Ç–∏")]',
            ]

            for selector in selectors:
                try:
                    locator = page.locator(selector)
                    if locator.count() > 0:
                        for i in range(locator.count()):
                            if locator.nth(i).is_visible():
                                locator.nth(i).click()
                                print(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞: {selector}")
                                button_clicked = True
                                break
                    if button_clicked:
                        break
                except:
                    continue

            if not button_clicked:
                raise Exception("–ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            page.wait_for_timeout(2000)

            # === –ü–ï–†–ï–•–û–î –ù–ê –ö–ê–õ–ï–ù–î–ê–†–¨ ===
            print("üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ vsporte.php...")
            page.goto(TARGET_URL, timeout=30000)
            page.wait_for_load_state('domcontentloaded')

            # === –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–°–ü–û–õ–¨–ó–£–ï–ú wait_for_function –ö–ê–ö –í –í–ê–®–ï–ú –ö–û–î–ï ===
            print("‚è≥ –û–∂–∏–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É '–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò'...")
            try:
                page.wait_for_function("""
                    () => {
                        const th = Array.from(document.querySelectorAll('th'))
                            .find(el => el.textContent.includes('–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò'));
                        if (!th) return false;
                        const table = th.closest('table');
                        if (!table) return false;
                        const rows = table.querySelectorAll('tr:has(td)');
                        return rows.length > 0;
                    }
                """, timeout=20000)
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ—è–≤–∏–ª–∞—Å—å!")
            except PlaywrightTimeoutError:
                print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã")
                # –ù–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º - –º–æ–∂–µ—Ç —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ –µ—Å—Ç—å

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
            time.sleep(2)

            # === –ü–ê–†–°–ò–ù–ì - –¢–û–ß–ù–û –ö–ê–ö –í –í–ê–®–ï–ú –†–ê–ë–û–ß–ï–ú –ö–û–î–ï ===
            print("üîç –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É...")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–ß–ù–´–ô XPath –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞
            table_locator = page.locator('//th[contains(., "–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò")]/ancestor::table')

            if table_locator.count() == 0:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ XPath")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                with open('debug_vsporte.html', 'w', encoding='utf-8') as f:
                    f.write(page.content())
                print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω debug_vsporte.html")

                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π JSON
                output = {
                    'matches': [],
                    'arenas': [],
                    'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                    'total_matches': 0
                }

                with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                    json.dump(output, f, ensure_ascii=False, indent=2)
                print("üíæ –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π JSON")
                return

            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞!")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏
            row_locators = table_locator.locator('tr:has(td)').all()
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(row_locators)}")

            # –ü–ê–†–°–ò–ú - –ö–ê–ö –í –í–ê–®–ï–ú –ö–û–î–ï
            data = []
            for row in row_locators:
                cells = row.locator('td').all()
                if len(cells) < 8:
                    continue

                texts = [cell.inner_text().strip() for cell in cells]

                # –ü–∞—Ä–∞
                pair = " ‚Äì ".join(filter(None, [texts[6], texts[7]])) if len(texts) > 7 else ""

                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É
                full_row = texts[:6] + [pair] + texts[8:11]
                while len(full_row) < 10:
                    full_row.append("")

                data.append(full_row)

            print(f"üìã –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(data)}")

            # –§–∏–ª—å—Ç—Ä—É–µ–º
            today = date.today()
            filtered_data = []

            for row in data:
                date_str = row[1]
                match_date = parse_date_str(date_str)

                if match_date and match_date > today:
                    filtered_data.append(row)

            print(f"‚úÖ –û—Ç–æ–±—Ä–∞–Ω–æ {len(filtered_data)} –º–∞—Ç—á–µ–π")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
            matches = []
            for row in filtered_data:
                match = {
                    'day': row[0],
                    'date': row[1],
                    'tour': row[2],
                    'game_num': row[3],
                    'time': row[4],
                    'year': row[5],
                    'pair': row[6],
                    'name': row[7] if row[7] else '–ü–µ—Ä–≤–µ–Ω—Å—Ç–≤–æ –ú–æ—Å–∫–≤—ã',
                    'arena': row[7],
                    'map': 'https://yandex.ru/maps/',
                    'address': row[9]
                }
                matches.append(match)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            arenas = sorted(list(set(m['arena'] for m in matches if m['arena'])))

            output = {
                'matches': matches,
                'arenas': arenas,
                'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                'total_matches': len(matches)
            }

            with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                json.dump(output, f, ensure_ascii=False, indent=2)

            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {OUTPUT_FILE}")
            print(f"üìä –ú–∞—Ç—á–µ–π: {len(matches)} | –ê—Ä–µ–Ω: {len(arenas)}")
            print("="*60)
            print("‚úÖ –ì–û–¢–û–í–û!")
            print("="*60)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            try:
                page.screenshot(path='error_screenshot.png', full_page=True)
                with open('error_full.html', 'w', encoding='utf-8') as f:
                    f.write(page.content())
                print("üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã error_screenshot.png –∏ error_full.html")
            except:
                pass

            # –ü—É—Å—Ç–æ–π JSON
            try:
                with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                    json.dump({
                        'matches': [],
                        'arenas': [],
                        'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                        'total_matches': 0,
                        'error': str(e)
                    }, f, ensure_ascii=False, indent=2)
            except:
                pass
        finally:
            browser.close()


if __name__ == "__main__":
    main()
