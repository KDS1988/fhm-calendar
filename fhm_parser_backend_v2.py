#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FHM Calendar Parser - Backend –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
–ü–∞—Ä—Å–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞—Ç—á–µ–π —Å referee.fhmoscow.com –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ JSON
"""
from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError
from datetime import date, datetime, timedelta
from dotenv import load_dotenv
import logging
import json
import os

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

LOGIN_URL = 'http://referee.fhmoscow.com/adm/index.php'
TARGET_URL = 'http://referee.fhmoscow.com/adm/vsporte.php'
LOGIN = os.getenv('FHMO_LOGIN')
PASSWORD = os.getenv('FHMO_PASS')
OUTPUT_FILE = 'matches_data.json'

if not LOGIN or not PASSWORD:
    raise EnvironmentError("‚ùå FHMO_LOGIN –∏ FHMO_PASS –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")


def parse_date_str(date_str):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É DD.MM.YYYY"""
    try:
        d, m, y = map(int, str(date_str).strip().split('.'))
        return date(y, m, d)
    except:
        return None


def main():
    """–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø - —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏"""
    with sync_playwright() as p:
        logger.info("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")

        browser = p.chromium.launch(
            headless=True,
            args=['--disable-blink-features=AutomationControlled']
        )

        # –í–ê–ñ–ù–û: –û–¥–∏–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç cookies/—Å–µ—Å—Å–∏—é)
        context = browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        )

        page = context.new_page()

        try:
            # ===== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====
            logger.info("üîê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...")
            page.goto(LOGIN_URL, timeout=30000)
            page.wait_for_load_state('networkidle')
            logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

            logger.info("üìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É...")
            page.fill('input[name="login"]', LOGIN)
            page.fill('input[name="password"]', PASSWORD)

            logger.info("üñ± –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞...")
            for selector in ['input[type="submit"]', 'button[type="submit"]', 'form button']:
                try:
                    if page.locator(selector).count() > 0:
                        page.locator(selector).first.click()
                        logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞: {selector}")
                        break
                except:
                    continue

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            try:
                page.wait_for_load_state('networkidle', timeout=10000)
            except:
                pass

            page.wait_for_timeout(3000)

            logger.info(f"üìç –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞: {page.url}")

            # ===== –ü–ï–†–ï–•–û–î –ù–ê –ö–ê–õ–ï–ù–î–ê–†–¨ (–≤ —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ!) =====
            logger.info("üìÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ vsporte.php (—Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞)...")

            # –í–ê–†–ò–ê–ù–¢ 1: –ß–µ—Ä–µ–∑ page.goto (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç cookies)
            page.goto(TARGET_URL, timeout=30000)
            page.wait_for_load_state('networkidle', timeout=30000)
            page.wait_for_timeout(3000)

            logger.info(f"üìç –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {page.url}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            content = page.content()
            with open('vsporte_final.html', 'w', encoding='utf-8') as f:
                f.write(content)
            page.screenshot(path='vsporte_final.png', full_page=True)
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã vsporte_final.html –∏ .png")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
            if '–í—Ö–æ–¥' in content or 'content_user_login' in content:
                logger.error("‚ùå –°–µ—Å—Å–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –¥–∞–∂–µ —Å –æ–¥–Ω–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º!")
                logger.error("–í–æ–∑–º–æ–∂–Ω–æ —Å–∞–π—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

                # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –∫–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ –≤–º–µ—Å—Ç–æ goto
                logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...")
                page.goto(LOGIN_URL, timeout=30000)
                page.fill('input[name="login"]', LOGIN)
                page.fill('input[name="password"]', PASSWORD)
                page.locator('input[type="submit"]').first.click()
                page.wait_for_load_state('networkidle', timeout=10000)

                # –¢–µ–ø–µ—Ä—å –ö–õ–ò–ö–ê–ï–ú –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ vsporte (–µ—Å–ª–∏ –µ—Å—Ç—å)
                try:
                    vsporte_link = page.locator('a[href*="vsporte"]')
                    if vsporte_link.count() > 0:
                        logger.info("üîó –ù–∞—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ vsporte, –∫–ª–∏–∫–∞–µ–º...")
                        vsporte_link.first.click()
                        page.wait_for_load_state('networkidle', timeout=10000)
                        content = page.content()
                except:
                    pass

            # ===== –ü–ê–†–°–ò–ù–ì =====
            logger.info("üîç –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É...")

            table_locator = None
            try:
                table_locator = page.locator('//th[contains(., "–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò")]/ancestor::table')
                if table_locator.count() > 0:
                    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞!")
                else:
                    logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ —Å '–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è XPath –æ—à–∏–±–∫–∞: {e}")

            # Fallback
            if not table_locator or table_locator.count() == 0:
                logger.info("üîç –ò—â–µ–º –ª—é–±—ã–µ –±–æ–ª—å—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã...")
                tables = page.locator('table').all()
                logger.info(f"  –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")

                max_rows = 0
                best_table_idx = -1

                for i, table in enumerate(tables):
                    try:
                        rows = len(table.locator('tr').all())
                        if rows > max_rows and rows > 5:
                            max_rows = rows
                            best_table_idx = i
                            logger.info(f"  –¢–∞–±–ª–∏—Ü–∞ {i+1}: {rows} —Å—Ç—Ä–æ–∫")
                    except:
                        pass

                if best_table_idx >= 0:
                    table_locator = page.locator('table').nth(best_table_idx)
                    logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É {best_table_idx+1} —Å {max_rows} —Å—Ç—Ä–æ–∫–∞–º–∏")

            if not table_locator or table_locator.count() == 0:
                logger.error("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                logger.info("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ vsporte_final.html")
                raise Exception("–¢–∞–±–ª–∏—Ü–∞ —Å –º–∞—Ç—á–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            # –ü–∞—Ä—Å–∏–º
            row_locators = table_locator.locator('tr:has(td)').all()
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(row_locators)}")

            today = date.today()
            matches = []

            for idx, row in enumerate(row_locators):
                try:
                    cells = row.locator('td').all()
                    if len(cells) < 8:
                        continue

                    texts = [cell.inner_text().strip() for cell in cells]

                    date_str = texts[1] if len(texts) > 1 else ''
                    match_date = parse_date_str(date_str)

                    if not match_date or match_date <= today:
                        continue

                    team1 = texts[6].split('\n')[0] if len(texts) > 6 else ''
                    team2 = texts[7].split('\n')[0] if len(texts) > 7 else ''
                    pair = f"{team1} ‚Äì {team2}" if team1 and team2 else ""

                    match = {
                        'day': texts[0] if len(texts) > 0 else '',
                        'date': date_str,
                        'tour': texts[2] if len(texts) > 2 else '',
                        'game_num': texts[3] if len(texts) > 3 else '',
                        'time': texts[4] if len(texts) > 4 else '',
                        'year': texts[5] if len(texts) > 5 else '',
                        'pair': pair,
                        'name': '–ü–µ—Ä–≤–µ–Ω—Å—Ç–≤–æ –ú–æ—Å–∫–≤—ã',
                        'arena': texts[8] if len(texts) > 8 else '',
                        'map': 'https://yandex.ru/maps/',
                        'address': texts[10] if len(texts) > 10 else ''
                    }

                    matches.append(match)
                    logger.info(f"  ‚úÖ {pair} ({date_str})")

                except Exception as e:
                    logger.debug(f"  –°—Ç—Ä–æ–∫–∞ {idx}: {e}")

            logger.info(f"‚úÖ –ò—Ç–æ–≥–æ —Å–ø–∞—Ä—Å–µ–Ω–æ: {len(matches)} –º–∞—Ç—á–µ–π")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            arenas = sorted(list(set(m['arena'] for m in matches if m['arena'])))

            output = {
                'matches': matches,
                'arenas': arenas,
                'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                'total_matches': len(matches)
            }

            with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                json.dump(output, f, ensure_ascii=False, indent=2)

            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {OUTPUT_FILE}")
            logger.info(f"üìä –ú–∞—Ç—á–µ–π: {len(matches)} | –ê—Ä–µ–Ω: {len(arenas)}")
            logger.info("="*60)
            logger.info("‚úÖ –ì–û–¢–û–í–û!")
            logger.info("="*60)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            try:
                with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                    json.dump({
                        'matches': [],
                        'arenas': [],
                        'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                        'total_matches': 0
                    }, f, ensure_ascii=False, indent=2)
                logger.info("üíæ –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π JSON")
            except:
                pass
        finally:
            browser.close()


if __name__ == "__main__":
    main()
