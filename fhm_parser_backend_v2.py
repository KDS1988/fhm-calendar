#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FHM Calendar Parser - Backend –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
–ü–∞—Ä—Å–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞—Ç—á–µ–π —Å referee.fhmoscow.com –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ JSON
"""

from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError
from datetime import date, datetime, timedelta
from dotenv import load_dotenv
import logging
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
LOGIN_URL = 'http://referee.fhmoscow.com/adm/index.php'
TARGET_URL = 'http://referee.fhmoscow.com/adm/vsporte.php'
LOGIN = os.getenv('FHMO_LOGIN')
PASSWORD = os.getenv('FHMO_PASS')
OUTPUT_FILE = 'matches_data.json'

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not LOGIN or not PASSWORD:
    raise EnvironmentError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ FHMO_LOGIN –∏ FHMO_PASS –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã!")


def parse_date_str(date_str):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY –∏–ª–∏ D.M.YYYY

    Args:
        date_str: –°—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã

    Returns:
        –û–±—ä–µ–∫—Ç date –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        d, m, y = map(int, str(date_str).strip().split('.'))
        return date(y, m, d)
    except:
        return None


def parse_matches():
    """
    –ü–∞—Ä—Å–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞—Ç—á–µ–π —Å —Å–∞–π—Ç–∞ FHM

    Returns:
        list: –°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä–µ–π
    """
    matches = []

    with sync_playwright() as p:
        logger.info("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        browser = p.chromium.launch(headless=True)
        context = browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        )
        page = context.new_page()

        try:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            logger.info("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ...")
            for attempt in range(3):
                try:
                    page.goto(LOGIN_URL, timeout=30000)
                    page.wait_for_load_state('domcontentloaded')
                    break
                except PlaywrightTimeoutError:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3")
                    if attempt == 2:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")

            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
            page.fill('input[name="login"]', LOGIN)
            page.fill('input[name="password"]', PASSWORD)

            # –ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞
            selectors = [
                'input[type="submit"]',
                'input[value="–í–æ–π—Ç–∏"]',
                'button[type="submit"]',
                'button:has-text("–í–æ–π—Ç–∏")',
                'form button'
            ]

            button_clicked = False
            for selector in selectors:
                try:
                    locator = page.locator(selector)
                    if locator.count() > 0 and locator.first.is_visible():
                        locator.first.click()
                        logger.info(f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        button_clicked = True
                        break
                except:
                    continue

            if not button_clicked:
                raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞")

            page.wait_for_timeout(2000)

            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            logger.info("üìÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å...")
            page.goto(TARGET_URL, timeout=30000)
            page.wait_for_load_state('domcontentloaded')

            # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            page.wait_for_function("""
                () => {
                    const th = Array.from(document.querySelectorAll('th'))
                        .find(el => el.textContent.includes('–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò'));
                    if (!th) return false;
                    const table = th.closest('table');
                    const rows = table.querySelectorAll('tr:has(td)');
                    return rows.length > 0;
                }
            """, timeout=15000)

            # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã
            table_locator = page.locator('th:has-text("–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò")').locator('xpath=ancestor::table')
            row_locators = table_locator.locator('tr:has(td)').all()

            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(row_locators)}")

            for row in row_locators:
                cells = row.locator('td').all()
                if len(cells) < 8:
                    continue

                texts = [cell.inner_text().strip() for cell in cells]

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                team1 = texts[6].split('\n')[0] if len(texts) > 6 else ''
                team2 = texts[7].split('\n')[0] if len(texts) > 7 else ''
                pair = f"{team1} - {team2}" if team1 and team2 else ''

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–µ–Ω—É –∏ –∞–¥—Ä–µ—Å
                arena = texts[8] if len(texts) > 8 else ''
                address = texts[10] if len(texts) > 10 else ''

                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É
                map_link = ''
                try:
                    map_cell = cells[9] if len(cells) > 9 else None
                    if map_cell:
                        link = map_cell.locator('a')
                        if link.count() > 0:
                            map_link = link.first.get_attribute('href') or ''
                except:
                    pass

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –º–∞—Ç—á–∞ —Å –ù–û–í–û–ô –°–¢–†–£–ö–¢–£–†–û–ô
                match = {
                    'day': texts[0] if len(texts) > 0 else '',           # –î–µ–Ω—å
                    'date': texts[1] if len(texts) > 1 else '',          # –î–∞—Ç–∞
                    'tour': texts[2] if len(texts) > 2 else '',          # –¢—É—Ä
                    'game_num': texts[3] if len(texts) > 3 else '',      # ‚Ññ –∏–≥—Ä—ã
                    'time': texts[4] if len(texts) > 4 else '',          # –í—Ä–µ–º—è
                    'year': texts[5] if len(texts) > 5 else '',          # –ì–æ–¥
                    'pair': pair,                                         # –ü–∞—Ä–∞ (–∫–æ–º–∞–Ω–¥—ã)
                    'name': '–ü–µ—Ä–≤–µ–Ω—Å—Ç–≤–æ –ú–æ—Å–∫–≤—ã',                         # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (–º–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å)
                    'arena': arena,                                       # –ü–ª–æ—â–∞–¥–∫–∞ (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏)
                    'map': map_link if map_link else 'https://yandex.ru/maps/', # –ù–∞ –∫–∞—Ä—Ç–µ
                    'address': address                                    # –ê–¥—Ä–µ—Å
                }

                # –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –º–∞—Ç—á–∏
                match_date = parse_date_str(match['date'])
                if match_date and match_date > date.today():
                    matches.append(match)

            logger.info(f"‚úÖ –°–ø–∞—Ä—Å–µ–Ω–æ {len(matches)} –±—É–¥—É—â–∏—Ö –º–∞—Ç—á–µ–π")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            try:
                page.screenshot(path='error_screenshot.png')
                logger.info("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            except:
                pass
            raise
        finally:
            browser.close()

    return matches


def save_to_json(matches, filename=OUTPUT_FILE):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π –≤ JSON —Ñ–∞–π–ª

    Args:
        matches: –°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞—Ä–µ–Ω—ã
    arenas = sorted(list(set(m['arena'] for m in matches if m['arena'])))

    data = {
        'matches': matches,
        'arenas': arenas,
        'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
        'total_matches': len(matches)
    }

    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    logger.info(f"üìä –ú–∞—Ç—á–µ–π: {len(matches)} | –ê—Ä–µ–Ω: {len(arenas)}")

    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ç—á–∞
    if matches:
        logger.info("\nüìã –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ç—á–∞:")
        example = matches[0]
        logger.info(f"  –î–µ–Ω—å: {example['day']}")
        logger.info(f"  –î–∞—Ç–∞: {example['date']}")
        logger.info(f"  –¢—É—Ä: {example['tour']}")
        logger.info(f"  ‚Ññ –∏–≥—Ä—ã: {example['game_num']}")
        logger.info(f"  –í—Ä–µ–º—è: {example['time']}")
        logger.info(f"  –ì–æ–¥: {example['year']}")
        logger.info(f"  –ü–∞—Ä–∞: {example['pair']}")
        logger.info(f"  –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {example['name']}")
        logger.info(f"  –ù–∞ –∫–∞—Ä—Ç–µ: {example['map']}")
        logger.info(f"  –ê–¥—Ä–µ—Å: {example['address']}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logger.info("=" * 60)
        logger.info("FHM Calendar Parser - –ó–∞–ø—É—Å–∫ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
        logger.info("=" * 60)

        # –ü–∞—Ä—Å–∏–Ω–≥
        matches = parse_matches()

        if not matches:
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        save_to_json(matches)

        logger.info("=" * 60)
        logger.info("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info("=" * 60)

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == '__main__':
    main()
