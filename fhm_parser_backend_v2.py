#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FHM Calendar Parser - Backend –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
–ü–∞—Ä—Å–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞—Ç—á–µ–π —Å referee.fhmoscow.com –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ JSON
"""
from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError
from datetime import date, datetime, timedelta
from dotenv import load_dotenv
import logging
import json
import os

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

LOGIN_URL = 'http://referee.fhmoscow.com/adm/index.php'
TARGET_URL = 'http://referee.fhmoscow.com/adm/vsporte.php'
LOGIN = os.getenv('FHMO_LOGIN')
PASSWORD = os.getenv('FHMO_PASS')
OUTPUT_FILE = 'matches_data.json'

if not LOGIN or not PASSWORD:
    raise EnvironmentError("‚ùå FHMO_LOGIN –∏ FHMO_PASS –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")


def parse_date_str(date_str):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É DD.MM.YYYY"""
    try:
        d, m, y = map(int, str(date_str).strip().split('.'))
        return date(y, m, d)
    except:
        return None


def main():
    """–° –ü–†–û–í–ï–†–ö–û–ô –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò"""
    with sync_playwright() as p:
        logger.info("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")

        # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        browser = p.chromium.launch(
            headless=True,
            args=['--disable-blink-features=AutomationControlled']  # –°–∫—Ä—ã–≤–∞–µ–º —á—Ç–æ –º—ã –±–æ—Ç
        )

        context = browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            accept_downloads=True,
            has_touch=False,
            is_mobile=False,
        )

        page = context.new_page()

        try:
            # ===== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====
            logger.info("üîê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...")
            page.goto(LOGIN_URL, timeout=30000)
            page.wait_for_load_state('networkidle')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            with open('01_login_page.html', 'w', encoding='utf-8') as f:
                f.write(page.content())
            page.screenshot(path='01_login_page.png')
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã 01_login_page.html –∏ .png")

            logger.info("üìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É...")
            page.fill('input[name="login"]', LOGIN)
            page.fill('input[name="password"]', PASSWORD)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
            with open('02_before_submit.html', 'w', encoding='utf-8') as f:
                f.write(page.content())

            # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
            logger.info("üñ± –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞...")
            button_clicked = False
            for selector in ['input[type="submit"]', 'button[type="submit"]', 'form button']:
                try:
                    if page.locator(selector).count() > 0:
                        page.locator(selector).first.click()
                        logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞: {selector}")
                        button_clicked = True
                        break
                except:
                    continue

            if not button_clicked:
                raise Exception("–ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            # –í–ê–ñ–ù–û: –ñ–¥–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies
            try:
                page.wait_for_load_state('networkidle', timeout=10000)
            except:
                logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç networkidle, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")

            page.wait_for_timeout(3000)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
            with open('03_after_submit.html', 'w', encoding='utf-8') as f:
                f.write(page.content())
            page.screenshot(path='03_after_submit.png')
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã 03_after_submit.html –∏ .png")

            # –ü–†–û–í–ï–†–ö–ê: –£—Å–ø–µ—à–Ω–∞ –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è?
            current_url = page.url
            content = page.content()

            logger.info(f"üìç –¢–µ–∫—É—â–∏–π URL: {current_url}")

            # –ü—Ä–∏–∑–Ω–∞–∫–∏ –ù–ï —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if 'index.php' in current_url or '–í—Ö–æ–¥' in content or 'content_user_login' in content:
                logger.error("‚ùå –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ù–ï –ü–†–û–®–õ–ê!")
                logger.error("–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É")
                logger.info("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã 01-03_*.html –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                logger.info("üîë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –≤ GitHub Secrets")
                raise Exception("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?")

            logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–≥–ª—è–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ–π")

            # ===== –ü–ï–†–ï–•–û–î –ù–ê –ö–ê–õ–ï–ù–î–ê–†–¨ =====
            logger.info("üìÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ vsporte.php...")
            page.goto(TARGET_URL, timeout=30000)
            page.wait_for_load_state('networkidle', timeout=30000)
            page.wait_for_timeout(3000)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            with open('04_vsporte_page.html', 'w', encoding='utf-8') as f:
                f.write(page.content())
            page.screenshot(path='04_vsporte_page.png', full_page=True)
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã 04_vsporte_page.html –∏ .png")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            content = page.content()
            if '–í—Ö–æ–¥' in content or 'content_user_login' in content:
                logger.error("‚ùå –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥!")
                logger.error("–í–æ–∑–º–æ–∂–Ω–æ —Å–µ—Å—Å–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å")
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é")

            # ===== –ü–ê–†–°–ò–ù–ì =====
            logger.info("üîç –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É...")

            table_locator = None
            try:
                table_locator = page.locator('//th[contains(., "–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò")]/ancestor::table')
                if table_locator.count() > 0:
                    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞!")
                else:
                    logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ XPath")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è XPath –æ—à–∏–±–∫–∞: {e}")

            # Fallback - –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            if not table_locator or table_locator.count() == 0:
                logger.info("üîç –ò—â–µ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
                tables = page.locator('table').all()
                logger.info(f"  –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")

                for i, table in enumerate(tables):
                    try:
                        rows = len(table.locator('tr').all())
                        if rows > 5:
                            table_locator = page.locator('table').nth(i)
                            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É {i+1} —Å {rows} —Å—Ç—Ä–æ–∫–∞–º–∏")
                            break
                    except:
                        pass

            if not table_locator or table_locator.count() == 0:
                logger.error("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                raise Exception("–¢–∞–±–ª–∏—Ü–∞ —Å –º–∞—Ç—á–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏
            row_locators = table_locator.locator('tr:has(td)').all()
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(row_locators)}")

            today = date.today()
            matches = []

            for idx, row in enumerate(row_locators):
                try:
                    cells = row.locator('td').all()
                    if len(cells) < 8:
                        continue

                    texts = [cell.inner_text().strip() for cell in cells]

                    date_str = texts[1] if len(texts) > 1 else ''
                    match_date = parse_date_str(date_str)

                    if not match_date or match_date <= today:
                        continue

                    team1 = texts[6].split('\n')[0] if len(texts) > 6 else ''
                    team2 = texts[7].split('\n')[0] if len(texts) > 7 else ''
                    pair = f"{team1} ‚Äì {team2}" if team1 and team2 else ""

                    match = {
                        'day': texts[0] if len(texts) > 0 else '',
                        'date': date_str,
                        'tour': texts[2] if len(texts) > 2 else '',
                        'game_num': texts[3] if len(texts) > 3 else '',
                        'time': texts[4] if len(texts) > 4 else '',
                        'year': texts[5] if len(texts) > 5 else '',
                        'pair': pair,
                        'name': '–ü–µ—Ä–≤–µ–Ω—Å—Ç–≤–æ –ú–æ—Å–∫–≤—ã',
                        'arena': texts[8] if len(texts) > 8 else '',
                        'map': 'https://yandex.ru/maps/',
                        'address': texts[10] if len(texts) > 10 else ''
                    }

                    matches.append(match)
                    logger.info(f"  ‚úÖ {pair} ({date_str})")

                except Exception as e:
                    logger.debug(f"  –°—Ç—Ä–æ–∫–∞ {idx}: {e}")

            logger.info(f"‚úÖ –°–ø–∞—Ä—Å–µ–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            arenas = sorted(list(set(m['arena'] for m in matches if m['arena'])))

            output = {
                'matches': matches,
                'arenas': arenas,
                'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                'total_matches': len(matches)
            }

            with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                json.dump(output, f, ensure_ascii=False, indent=2)

            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {OUTPUT_FILE}")
            logger.info(f"üìä –ú–∞—Ç—á–µ–π: {len(matches)} | –ê—Ä–µ–Ω: {len(arenas)}")
            logger.info("="*60)
            logger.info("‚úÖ –ì–û–¢–û–í–û!")
            logger.info("="*60)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π JSON
            try:
                with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                    json.dump({
                        'matches': [],
                        'arenas': [],
                        'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                        'total_matches': 0
                    }, f, ensure_ascii=False, indent=2)
                logger.info("üíæ –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π JSON")
            except:
                pass
        finally:
            browser.close()


if __name__ == "__main__":
    main()
