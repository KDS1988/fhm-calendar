#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FHM Calendar Parser - Backend –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
–ü–∞—Ä—Å–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞—Ç—á–µ–π —Å referee.fhmoscow.com –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ JSON
"""
from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError
from datetime import date, datetime, timedelta
from dotenv import load_dotenv
import logging
import json
import os

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

LOGIN_URL = 'http://referee.fhmoscow.com/adm/index.php'
TARGET_URL = 'http://referee.fhmoscow.com/adm/vsporte.php'
LOGIN = os.getenv('FHMO_LOGIN')
PASSWORD = os.getenv('FHMO_PASS')
OUTPUT_FILE = 'matches_data.json'

if not LOGIN or not PASSWORD:
    raise EnvironmentError("‚ùå FHMO_LOGIN –∏ FHMO_PASS –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")


def parse_date_str(date_str):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É DD.MM.YYYY"""
    try:
        d, m, y = map(int, str(date_str).strip().split('.'))
        return date(y, m, d)
    except:
        return None


def parse_matches():
    """–ü–∞—Ä—Å–∏—Ç –º–∞—Ç—á–∏ - –ë–ï–ó –ü–ê–î–ï–ù–ò–Ø"""
    matches = []

    with sync_playwright() as p:
        logger.info("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        browser = p.chromium.launch(headless=True)
        context = browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        )
        page = context.new_page()

        try:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            logger.info("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
            page.goto(LOGIN_URL, timeout=30000)
            page.wait_for_load_state('domcontentloaded')

            page.fill('input[name="login"]', LOGIN)
            page.fill('input[name="password"]', PASSWORD)

            # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏
            button_clicked = False
            for selector in ['input[type="submit"]', 'button[type="submit"]', 'form button']:
                try:
                    if page.locator(selector).count() > 0:
                        page.locator(selector).first.click()
                        logger.info(f"‚úÖ –í—Ö–æ–¥: {selector}")
                        button_clicked = True
                        break
                except:
                    continue

            if not button_clicked:
                raise Exception("–ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            page.wait_for_timeout(2000)

            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            logger.info("üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
            page.goto(TARGET_URL, timeout=30000)
            page.wait_for_load_state('networkidle', timeout=30000)
            page.wait_for_timeout(3000)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            page.screenshot(path='page_screenshot.png', full_page=True)
            with open('page_source.html', 'w', encoding='utf-8') as f:
                f.write(page.content())
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã page_screenshot.png –∏ page_source.html")

            # –ü–´–¢–ê–ï–ú–°–Ø –ù–ê–ô–¢–ò –¢–ê–ë–õ–ò–¶–£ (–ë–ï–ó –ü–ê–î–ï–ù–ò–Ø)
            logger.info("üîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã —Å –º–∞—Ç—á–∞–º–∏...")

            table_found = False
            table_locator = None

            # –°–ø–æ—Å–æ–± 1: XPath (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
            try:
                logger.info("  –ü–æ–ø—ã—Ç–∫–∞ 1: XPath —Å –ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò...")
                table_locator = page.locator('//th[contains(., "–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò")]/ancestor::table')
                if table_locator.count() > 0:
                    table_found = True
                    logger.info("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞ (XPath)")
            except Exception as e:
                logger.warning(f"  ‚ö†Ô∏è –°–ø–æ—Å–æ–± 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

            # –°–ø–æ—Å–æ–± 2: CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
            if not table_found:
                try:
                    logger.info("  –ü–æ–ø—ã—Ç–∫–∞ 2: CSS —Å–µ–ª–µ–∫—Ç–æ—Ä...")
                    tables = page.locator('table').all()
                    for i, table in enumerate(tables):
                        text = table.inner_text()
                        if '–ë–õ–ò–ñ–ê–ô–®' in text or '–ú–ê–¢–ß' in text or len(table.locator('tr').all()) > 5:
                            table_locator = page.locator('table').nth(i)
                            table_found = True
                            logger.info(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞ (CSS, –∏–Ω–¥–µ–∫—Å {i})")
                            break
                except Exception as e:
                    logger.warning(f"  ‚ö†Ô∏è –°–ø–æ—Å–æ–± 2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

            # –°–ø–æ—Å–æ–± 3: –°–∞–º–∞—è –±–æ–ª—å—à–∞—è —Ç–∞–±–ª–∏—Ü–∞
            if not table_found:
                try:
                    logger.info("  –ü–æ–ø—ã—Ç–∫–∞ 3: –°–∞–º–∞—è –±–æ–ª—å—à–∞—è —Ç–∞–±–ª–∏—Ü–∞...")
                    tables = page.locator('table').all()
                    max_rows = 0
                    max_idx = -1
                    for i, table in enumerate(tables):
                        rows = len(table.locator('tr').all())
                        if rows > max_rows:
                            max_rows = rows
                            max_idx = i

                    if max_rows > 5:
                        table_locator = page.locator('table').nth(max_idx)
                        table_found = True
                        logger.info(f"  ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å {max_rows} —Å—Ç—Ä–æ–∫–∞–º–∏")
                except Exception as e:
                    logger.warning(f"  ‚ö†Ô∏è –°–ø–æ—Å–æ–± 3 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

            if not table_found or not table_locator:
                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ page_source.html")
                logger.info("üìù –í–æ–∑–º–æ–∂–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –±—É–¥—É—â–∏—Ö –º–∞—Ç—á–µ–π")
                return matches  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –ù–ï –ø–∞–¥–∞–µ–º

            # –ü–ê–†–°–ò–ù–ì –ù–ê–ô–î–ï–ù–ù–û–ô –¢–ê–ë–õ–ò–¶–´
            logger.info("üìä –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã...")
            row_locators = table_locator.locator('tr:has(td)').all()
            logger.info(f"  –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏: {len(row_locators)}")

            today = date.today()

            for idx, row in enumerate(row_locators):
                try:
                    cells = row.locator('td').all()
                    if len(cells) < 8:
                        continue

                    texts = [cell.inner_text().strip() for cell in cells]

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    day = texts[0] if len(texts) > 0 else ''
                    date_str = texts[1] if len(texts) > 1 else ''
                    tour = texts[2] if len(texts) > 2 else ''
                    game_num = texts[3] if len(texts) > 3 else ''
                    time_str = texts[4] if len(texts) > 4 else ''
                    year = texts[5] if len(texts) > 5 else ''
                    team1 = texts[6].split('\n')[0] if len(texts) > 6 else ''
                    team2 = texts[7].split('\n')[0] if len(texts) > 7 else ''
                    arena = texts[8] if len(texts) > 8 else ''
                    address = texts[10] if len(texts) > 10 else ''

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
                    match_date = parse_date_str(date_str)
                    if not match_date:
                        logger.debug(f"  –°—Ç—Ä–æ–∫–∞ {idx}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ '{date_str}'")
                        continue

                    if match_date <= today:
                        logger.debug(f"  –°—Ç—Ä–æ–∫–∞ {idx}: —Å—Ç–∞—Ä–∞—è –¥–∞—Ç–∞ {date_str}")
                        continue

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—É
                    pair = f"{team1} ‚Äì {team2}" if team1 and team2 else ""

                    # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É
                    map_link = 'https://yandex.ru/maps/'
                    try:
                        if len(cells) > 9:
                            link = cells[9].locator('a')
                            if link.count() > 0:
                                map_link = link.first.get_attribute('href') or map_link
                    except:
                        pass

                    match = {
                        'day': day,
                        'date': date_str,
                        'tour': tour,
                        'game_num': game_num,
                        'time': time_str,
                        'year': year,
                        'pair': pair,
                        'name': '–ü–µ—Ä–≤–µ–Ω—Å—Ç–≤–æ –ú–æ—Å–∫–≤—ã',
                        'arena': arena,
                        'map': map_link,
                        'address': address
                    }

                    matches.append(match)
                    logger.info(f"  ‚úÖ –°—Ç—Ä–æ–∫–∞ {idx}: {pair} ({date_str})")

                except Exception as e:
                    logger.debug(f"  –°—Ç—Ä–æ–∫–∞ {idx}: –æ—à–∏–±–∫–∞ {e}")
                    continue

            logger.info(f"‚úÖ –ò—Ç–æ–≥–æ —Å–ø–∞—Ä—Å–µ–Ω–æ: {len(matches)} –º–∞—Ç—á–µ–π")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            try:
                page.screenshot(path='fatal_error.png', full_page=True)
                with open('fatal_error.html', 'w', encoding='utf-8') as f:
                    f.write(page.content())
                logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã fatal_error.png –∏ fatal_error.html")
            except:
                pass
            # –ù–ï –ø–∞–¥–∞–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        finally:
            browser.close()

    return matches


def save_to_json(matches, filename=OUTPUT_FILE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ JSON"""
    arenas = sorted(list(set(m['arena'] for m in matches if m['arena'])))

    data = {
        'matches': matches,
        'arenas': arenas,
        'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
        'total_matches': len(matches)
    }

    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {filename}")
    logger.info(f"üìä –ú–∞—Ç—á–µ–π: {len(matches)} | –ê—Ä–µ–Ω: {len(arenas)}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –í–°–ï–ì–î–ê –£–°–ü–ï–®–ù–ê"""
    logger.info("=" * 60)
    logger.info("FHM Parser v6 - –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞–¥–µ–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    logger.info("=" * 60)

    try:
        matches = parse_matches()
        save_to_json(matches)

        if len(matches) == 0:
            logger.warning("‚ö†Ô∏è –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ —ç—Ç–æ OK")
            logger.info("üìù –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            logger.info("  1. –ù–µ—Ç –±—É–¥—É—â–∏—Ö –º–∞—Ç—á–µ–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ")
            logger.info("  2. –ò–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞")
            logger.info("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ page_source.html –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")

        logger.info("=" * 60)
        logger.info("‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        logger.info("=" * 60)

    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –î–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ - —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π JSON
        try:
            save_to_json([])
        except:
            pass
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å –∫–æ–¥–æ–º 0 (—É—Å–ø–µ—Ö), —á—Ç–æ–±—ã GitHub Actions –Ω–µ –ø–∞–¥–∞–ª
        logger.info("üíæ –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π JSON —Ñ–∞–π–ª")
        logger.info("=" * 60)
        logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ (—Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)")
        logger.info("=" * 60)


if __name__ == '__main__':
    main()
