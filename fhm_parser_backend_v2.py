#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FHM Calendar Parser - Backend –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
–ü–∞—Ä—Å–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞—Ç—á–µ–π —Å referee.fhmoscow.com –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ JSON
"""
from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError
from datetime import date, datetime, timedelta
from dotenv import load_dotenv
import logging
import json
import os

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

LOGIN_URL = 'http://referee.fhmoscow.com/adm/index.php'
TARGET_URL = 'http://referee.fhmoscow.com/adm/vsporte.php'
LOGIN = os.getenv('FHMO_LOGIN')
PASSWORD = os.getenv('FHMO_PASS')
OUTPUT_FILE = 'matches_data.json'

if not LOGIN or not PASSWORD:
    raise EnvironmentError("‚ùå FHMO_LOGIN –∏ FHMO_PASS –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")


def parse_date_str(date_str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ 1.10.2025 –∏–ª–∏ 01.10.2025"""
    try:
        d, m, y = map(int, str(date_str).strip().split('.'))
        return date(y, m, d)
    except:
        return None


def main():
    """–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –õ–û–ì–ò–ö–ò"""
    with sync_playwright() as p:
        logger.info("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        browser = p.chromium.launch(headless=True)
        context = browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        )
        page = context.new_page()

        try:
            logger.info("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
            for attempt in range(3):
                try:
                    page.goto(LOGIN_URL, timeout=30000)
                    page.wait_for_load_state('domcontentloaded')
                    logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    break
                except PlaywrightTimeoutError:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3")
                    if attempt == 2:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")

            logger.info("üìù –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è...")
            page.fill('input[name="login"]', LOGIN)
            page.fill('input[name="password"]', PASSWORD)

            # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ - –¢–û–ß–ù–û –ö–ê–ö –í –û–†–ò–ì–ò–ù–ê–õ–ï
            logger.info("üñ± –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞...")
            button_clicked = False
            selectors = [
                'input[type="submit"]',
                'input[value="–í–æ–π—Ç–∏"]',
                'button[type="submit"]',
                'button:has-text("–í–æ–π—Ç–∏")',
                'button:has-text("–í—Ö–æ–¥")',
                'form button',
                'button >> text="–í–æ–π—Ç–∏"',
                '//input[@type="submit"]',
                '//button[contains(text(), "–í–æ–π—Ç–∏")]',
                '//button[contains(text(), "–í—Ö–æ–¥")]',
                '//button[@type="submit"]',
                '//form//button',
            ]

            for selector in selectors:
                try:
                    locator = page.locator(selector)
                    count = locator.count()
                    for i in range(count):
                        if locator.nth(i).is_visible():
                            locator.nth(i).click()
                            logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞: {selector}")
                            button_clicked = True
                            break
                    if button_clicked:
                        break
                except:
                    continue

            if not button_clicked:
                page.screenshot(path="login_error.png")
                raise Exception("–ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            page.wait_for_timeout(2000)

            logger.info("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ vsporte.php...")
            page.goto(TARGET_URL, timeout=30000)
            page.wait_for_load_state('domcontentloaded')

            # –ñ–¥—ë–º —Ç–∞–±–ª–∏—Ü—É - –¢–û–ß–ù–û –ö–ê–ö –í –û–†–ò–ì–ò–ù–ê–õ–ï
            logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É '–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò'...")
            page.wait_for_function("""
                () => {
                    const th = Array.from(document.querySelectorAll('th'))
                        .find(el => el.textContent.includes('–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò'));
                    if (!th) return false;
                    const table = th.closest('table');
                    const rows = table.querySelectorAll('tr:has(td)');
                    return rows.length > 0;
                }
            """, timeout=15000)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É - –¢–û–ß–ù–´–ô XPATH
            table_locator = page.locator('//th[contains(., "–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò")]/ancestor::table')
            row_locators = table_locator.locator('tr:has(td)').all()

            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(row_locators)}")

            # –ü–ê–†–°–ò–ú –í–°–ï –°–¢–†–û–ö–ò (–Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∑–¥–µ—Å—å!)
            data = []
            for row in row_locators:
                cells = row.locator('td').all()
                if len(cells) < 8:
                    continue

                texts = [cell.inner_text().strip() for cell in cells]

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—É - –¢–û–ß–ù–û –ö–ê–ö –í –û–†–ò–ì–ò–ù–ê–õ–ï
                pair = " ‚Äì ".join(filter(None, [texts[6], texts[7]])) if len(texts) > 7 else ""

                # full_row - –¢–û–ß–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê
                full_row = texts[:6] + [pair] + texts[8:11]
                while len(full_row) < 10:
                    full_row.append("")

                data.append(full_row)

            logger.info(f"üìã –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(data)}")

            # –§–ò–õ–¨–¢–†–ê–¶–ò–Ø - –ö–ê–ö –í –û–†–ò–ì–ò–ù–ê–õ–ï (–ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞!)
            today = date.today()
            filtered_data = []

            for row in data:
                date_str = row[1]  # –î–∞—Ç–∞ –≤–æ –≤—Ç–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–µ
                match_date = parse_date_str(date_str)

                # –§–ò–õ–¨–¢–†: —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã > today
                if match_date and match_date > today:
                    filtered_data.append(row)

            logger.info(f"‚úÖ –û—Ç–æ–±—Ä–∞–Ω–æ {len(filtered_data)} –º–∞—Ç—á–µ–π (–¥–∞—Ç–∞ > {today.strftime('%d.%m.%Y')})")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON —Ñ–æ—Ä–º–∞—Ç
            matches = []
            for row in filtered_data:
                match = {
                    'day': row[0],
                    'date': row[1],
                    'tour': row[2],
                    'game_num': row[3],
                    'time': row[4],
                    'year': row[5],
                    'pair': row[6],
                    'name': row[7] if row[7] else '–ü–µ—Ä–≤–µ–Ω—Å—Ç–≤–æ –ú–æ—Å–∫–≤—ã',
                    'map': row[8] if row[8] else 'https://yandex.ru/maps/',
                    'address': row[9]
                }
                matches.append(match)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–µ–Ω—ã –∏–∑ –ø–∞—Ä—ã (–±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–µ–Ω—ã)
            # –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∞—Ä–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–∞—Ö[8], –Ω–æ –º—ã –µ—ë –Ω–µ –±—Ä–∞–ª–∏
            # –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º arena –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

            # –ü–ï–†–ï–ü–ê–†–°–ò–ú —Å –∞—Ä–µ–Ω–æ–π
            matches_with_arena = []
            for row in row_locators:
                cells = row.locator('td').all()
                if len(cells) < 8:
                    continue

                texts = [cell.inner_text().strip() for cell in cells]

                date_str = texts[1] if len(texts) > 1 else ''
                match_date = parse_date_str(date_str)

                if not match_date or match_date <= today:
                    continue

                pair = " ‚Äì ".join(filter(None, [texts[6], texts[7]])) if len(texts) > 7 else ""
                arena = texts[8] if len(texts) > 8 else ''

                match = {
                    'day': texts[0] if len(texts) > 0 else '',
                    'date': date_str,
                    'tour': texts[2] if len(texts) > 2 else '',
                    'game_num': texts[3] if len(texts) > 3 else '',
                    'time': texts[4] if len(texts) > 4 else '',
                    'year': texts[5] if len(texts) > 5 else '',
                    'pair': pair,
                    'name': '–ü–µ—Ä–≤–µ–Ω—Å—Ç–≤–æ –ú–æ—Å–∫–≤—ã',
                    'arena': arena,
                    'map': 'https://yandex.ru/maps/',
                    'address': texts[10] if len(texts) > 10 else ''
                }
                matches_with_arena.append(match)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            arenas = sorted(list(set(m['arena'] for m in matches_with_arena if m['arena'])))

            output = {
                'matches': matches_with_arena,
                'arenas': arenas,
                'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                'total_matches': len(matches_with_arena)
            }

            with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                json.dump(output, f, ensure_ascii=False, indent=2)

            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {OUTPUT_FILE}")
            logger.info(f"üìä –ú–∞—Ç—á–µ–π: {len(matches_with_arena)} | –ê—Ä–µ–Ω: {len(arenas)}")
            logger.info("="*60)
            logger.info("‚úÖ –ì–û–¢–û–í–û!")
            logger.info("="*60)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            page.screenshot(path='error_screenshot.png')
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π JSON —á—Ç–æ–±—ã —Å–∞–π—Ç –Ω–µ —Å–ª–æ–º–∞–ª—Å—è
            try:
                with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                    json.dump({
                        'matches': [],
                        'arenas': [],
                        'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                        'total_matches': 0
                    }, f, ensure_ascii=False, indent=2)
                logger.info("üíæ –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π JSON")
            except:
                pass
            raise
        finally:
            browser.close()


if __name__ == "__main__":
    main()
