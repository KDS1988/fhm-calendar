#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FHM Calendar Parser - Backend –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
–ü–∞—Ä—Å–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞—Ç—á–µ–π —Å referee.fhmoscow.com –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ JSON
"""
from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError
from datetime import date, datetime, timedelta
from dotenv import load_dotenv
import logging
import json
import os

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

LOGIN_URL = 'http://referee.fhmoscow.com/adm/index.php'
TARGET_URL = 'http://referee.fhmoscow.com/adm/vsporte.php'
LOGIN = os.getenv('FHMO_LOGIN')
PASSWORD = os.getenv('FHMO_PASS')
OUTPUT_FILE = 'matches_data.json'

if not LOGIN or not PASSWORD:
    raise EnvironmentError("‚ùå FHMO_LOGIN –∏ FHMO_PASS –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")


def parse_date_str(date_str):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É DD.MM.YYYY"""
    try:
        d, m, y = map(int, str(date_str).strip().split('.'))
        return date(y, m, d)
    except:
        return None


def main():
    """–ë–ï–ó wait_for_function - –ø—Ä—è–º–æ–π –ø–∞—Ä—Å–∏–Ω–≥"""
    with sync_playwright() as p:
        logger.info("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        browser = p.chromium.launch(headless=True)
        context = browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        )
        page = context.new_page()

        try:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            logger.info("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
            page.goto(LOGIN_URL, timeout=30000)
            page.wait_for_load_state('domcontentloaded')
            logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

            page.fill('input[name="login"]', LOGIN)
            page.fill('input[name="password"]', PASSWORD)

            # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏
            button_clicked = False
            selectors = [
                'input[type="submit"]',
                'button[type="submit"]',
                'form button',
                'input[value="–í–æ–π—Ç–∏"]',
                '//input[@type="submit"]',
            ]

            for selector in selectors:
                try:
                    locator = page.locator(selector)
                    if locator.count() > 0:
                        if locator.first.is_visible():
                            locator.first.click()
                            logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞: {selector}")
                            button_clicked = True
                            break
                except:
                    continue

            if not button_clicked:
                page.screenshot(path="login_error.png")
                raise Exception("–ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            page.wait_for_timeout(2000)

            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            logger.info("üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ vsporte.php...")
            page.goto(TARGET_URL, timeout=30000)
            page.wait_for_load_state('networkidle', timeout=30000)  # –ñ–¥–µ–º –ü–û–õ–ù–£–Æ –∑–∞–≥—Ä—É–∑–∫—É
            logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
            page.wait_for_timeout(5000)  # 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            html_content = page.content()
            with open('vsporte_page.html', 'w', encoding='utf-8') as f:
                f.write(html_content)
            page.screenshot(path='vsporte_screenshot.png', full_page=True)
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã vsporte_page.html –∏ vsporte_screenshot.png")

            # –ü–ê–†–°–ò–ù–ì –ë–ï–ó –û–ñ–ò–î–ê–ù–ò–Ø - —Å—Ä–∞–∑—É –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É
            logger.info("üîç –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É (–±–µ–∑ wait_for_function)...")

            # –ü—Ä–æ–±—É–µ–º XPath
            table_locator = None
            try:
                table_locator = page.locator('//th[contains(., "–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò")]/ancestor::table')
                if table_locator.count() > 0:
                    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ XPath")
                else:
                    logger.warning("‚ö†Ô∏è XPath –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–±–ª–∏—Ü—É")
                    table_locator = None
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è XPath –æ—à–∏–±–∫–∞: {e}")

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –∏—â–µ–º –ª—é–±—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            if not table_locator or table_locator.count() == 0:
                logger.info("üîç –ò—â–µ–º –ª—é–±—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
                tables = page.locator('table').all()
                logger.info(f"  –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")

                for i, table in enumerate(tables):
                    try:
                        text = table.inner_text()
                        rows = len(table.locator('tr').all())
                        logger.info(f"  –¢–∞–±–ª–∏—Ü–∞ {i+1}: {rows} —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç: {text[:100]}")

                        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å "–ë–õ–ò–ñ–ê–ô–®" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±–æ–ª—å—à—É—é
                        if '–ë–õ–ò–ñ–ê–ô–®' in text or '–ú–ê–¢–ß' in text or rows > 10:
                            table_locator = page.locator('table').nth(i)
                            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É {i+1}")
                            break
                    except Exception as e:
                        logger.debug(f"  –¢–∞–±–ª–∏—Ü–∞ {i+1}: –æ—à–∏–±–∫–∞ {e}")

            if not table_locator or table_locator.count() == 0:
                logger.error("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                logger.info("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ vsporte_page.html –∏ vsporte_screenshot.png")
                raise Exception("–¢–∞–±–ª–∏—Ü–∞ —Å –º–∞—Ç—á–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            # –ü–ê–†–°–ò–ù–ì –°–¢–†–û–ö
            row_locators = table_locator.locator('tr:has(td)').all()
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(row_locators)}")

            if len(row_locators) == 0:
                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è!")
                # –ü—Ä–æ–±—É–µ–º –≤—Å–µ tr –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞
                row_locators = table_locator.locator('tr').all()
                logger.info(f"  –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(row_locators)}")

            today = date.today()
            matches = []

            for idx, row in enumerate(row_locators):
                try:
                    cells = row.locator('td').all()
                    if len(cells) < 8:
                        logger.debug(f"  –°—Ç—Ä–æ–∫–∞ {idx}: –º–∞–ª–æ —è—á–µ–µ–∫ ({len(cells)})")
                        continue

                    texts = [cell.inner_text().strip() for cell in cells]

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    day = texts[0] if len(texts) > 0 else ''
                    date_str = texts[1] if len(texts) > 1 else ''
                    tour = texts[2] if len(texts) > 2 else ''
                    game_num = texts[3] if len(texts) > 3 else ''
                    time_str = texts[4] if len(texts) > 4 else ''
                    year = texts[5] if len(texts) > 5 else ''
                    team1 = texts[6].split('\n')[0] if len(texts) > 6 else ''
                    team2 = texts[7].split('\n')[0] if len(texts) > 7 else ''
                    arena = texts[8] if len(texts) > 8 else ''
                    address = texts[10] if len(texts) > 10 else ''

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
                    match_date = parse_date_str(date_str)
                    if not match_date:
                        logger.debug(f"  –°—Ç—Ä–æ–∫–∞ {idx}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ '{date_str}'")
                        continue

                    if match_date <= today:
                        logger.debug(f"  –°—Ç—Ä–æ–∫–∞ {idx}: —Å—Ç–∞—Ä–∞—è –¥–∞—Ç–∞ {date_str}")
                        continue

                    # –ü–∞—Ä–∞
                    pair = f"{team1} ‚Äì {team2}" if team1 and team2 else ""

                    match = {
                        'day': day,
                        'date': date_str,
                        'tour': tour,
                        'game_num': game_num,
                        'time': time_str,
                        'year': year,
                        'pair': pair,
                        'name': '–ü–µ—Ä–≤–µ–Ω—Å—Ç–≤–æ –ú–æ—Å–∫–≤—ã',
                        'arena': arena,
                        'map': 'https://yandex.ru/maps/',
                        'address': address
                    }

                    matches.append(match)
                    logger.info(f"  ‚úÖ –°—Ç—Ä–æ–∫–∞ {idx}: {pair} ({date_str})")

                except Exception as e:
                    logger.debug(f"  –°—Ç—Ä–æ–∫–∞ {idx}: –æ—à–∏–±–∫–∞ {e}")

            logger.info(f"‚úÖ –°–ø–∞—Ä—Å–µ–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            arenas = sorted(list(set(m['arena'] for m in matches if m['arena'])))

            output = {
                'matches': matches,
                'arenas': arenas,
                'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                'total_matches': len(matches)
            }

            with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                json.dump(output, f, ensure_ascii=False, indent=2)

            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {OUTPUT_FILE}")
            logger.info(f"üìä –ú–∞—Ç—á–µ–π: {len(matches)} | –ê—Ä–µ–Ω: {len(arenas)}")
            logger.info("="*60)
            logger.info("‚úÖ –ì–û–¢–û–í–û!")
            logger.info("="*60)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            page.screenshot(path='fatal_error.png', full_page=True)
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π JSON
            try:
                with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                    json.dump({
                        'matches': [],
                        'arenas': [],
                        'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                        'total_matches': 0
                    }, f, ensure_ascii=False, indent=2)
                logger.info("üíæ –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π JSON")
            except:
                pass
        finally:
            browser.close()


if __name__ == "__main__":
    main()
