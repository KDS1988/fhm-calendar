#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FHM Calendar Parser - Backend –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
–ü–∞—Ä—Å–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞—Ç—á–µ–π —Å referee.fhmoscow.com –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ JSON
"""
from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError
from datetime import date, datetime, timedelta
from dotenv import load_dotenv
import logging
import json
import os
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
LOGIN_URL = 'http://referee.fhmoscow.com/adm/index.php'
TARGET_URL = 'http://referee.fhmoscow.com/adm/vsporte.php'
LOGIN = os.getenv('FHMO_LOGIN')
PASSWORD = os.getenv('FHMO_PASS')
OUTPUT_FILE = 'matches_data.json'

if not LOGIN or not PASSWORD:
    raise EnvironmentError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ FHMO_LOGIN –∏ FHMO_PASS –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã!")


def parse_date_str(date_str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã"""
    try:
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        date_str = str(date_str).strip().replace('\n', '')
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        for sep in ['.', '-', '/']:
            if sep in date_str:
                parts = date_str.split(sep)
                if len(parts) == 3:
                    d, m, y = map(int, parts)
                    if y < 100:  # –î–≤—É–∑–Ω–∞—á–Ω—ã–π –≥–æ–¥
                        y += 2000
                    return date(y, m, d)
    except:
        pass
    return None


def analyze_page_structure(page):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    logger.info("üî¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")

    try:
        # –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        tables = page.locator('table').all()
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(tables)}")

        for i, table in enumerate(tables):
            try:
                rows = table.locator('tr').count()
                cells_first_row = table.locator('tr').first.locator('td, th').count()
                logger.info(f"  –¢–∞–±–ª–∏—Ü–∞ {i+1}: {rows} —Å—Ç—Ä–æ–∫, {cells_first_row} –∫–æ–ª–æ–Ω–æ–∫ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ")

                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                try:
                    first_row_text = table.locator('tr').first.inner_text()
                    logger.info(f"    –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {first_row_text[:100]}")
                except:
                    pass
            except:
                logger.warning(f"  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É {i+1}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ä–º
        forms = page.locator('form').count()
        logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º: {forms}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = page.locator('h1, h2, h3, h4').all()
        if headers:
            logger.info(f"üìå –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:")
            for h in headers[:5]:  # –ü–µ—Ä–≤—ã–µ 5
                try:
                    logger.info(f"  - {h.inner_text()[:50]}")
                except:
                    pass

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")


def parse_matches():
    """–ü–∞—Ä—Å–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞—Ç—á–µ–π"""
    matches = []

    with sync_playwright() as p:
        logger.info("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        browser = p.chromium.launch(headless=True)
        context = browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        )
        page = context.new_page()

        try:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            logger.info("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
            page.goto(LOGIN_URL, timeout=30000)
            page.wait_for_load_state('domcontentloaded')

            page.fill('input[name="login"]', LOGIN)
            page.fill('input[name="password"]', PASSWORD)

            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            for selector in ['input[type="submit"]', 'button[type="submit"]', 'input[value*="—Ö–æ–¥"]']:
                try:
                    if page.locator(selector).count() > 0:
                        page.locator(selector).first.click()
                        logger.info("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        break
                except:
                    continue

            page.wait_for_timeout(2000)

            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            logger.info("üìÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å...")
            page.goto(TARGET_URL, timeout=30000)
            page.wait_for_load_state('networkidle', timeout=30000)  # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            page.wait_for_timeout(3000)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            html_content = page.content()
            with open('full_page.html', 'w', encoding='utf-8') as f:
                f.write(html_content)
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω full_page.html")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            analyze_page_structure(page)

            # –°–¢–†–ê–¢–ï–ì–ò–Ø 1: –ò—â–µ–º –≤—Å–µ tr —Å td (—Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö)
            logger.info("üîç –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏...")
            all_rows = page.locator('table tr:has(td)').all()
            logger.info(f"  –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(all_rows)}")

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ –º–∞—Ç—á–∏
            for row_idx, row in enumerate(all_rows):
                try:
                    cells = row.locator('td').all()
                    if len(cells) < 8:  # –ú–∏–Ω–∏–º—É–º 8 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –º–∞—Ç—á–∞
                        continue

                    texts = [cell.inner_text().strip() for cell in cells]

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —ç—Ç–æ –Ω–∞ –º–∞—Ç—á (–µ—Å—Ç—å –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY)
                    has_date = False
                    date_col_idx = -1
                    for i, text in enumerate(texts[:5]):  # –î–∞—Ç–∞ –æ–±—ã—á–Ω–æ –≤ –ø–µ—Ä–≤—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
                        if re.match(r'\d{1,2}\.\d{1,2}\.\d{4}', text):
                            has_date = True
                            date_col_idx = i
                            logger.info(f"  ‚úì –°—Ç—Ä–æ–∫–∞ {row_idx}: –Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ {i}: {text}")
                            break

                    if not has_date:
                        continue

                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
                    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º—Å—è –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: date_col_idx —É–∫–∞–∑—ã–≤–∞–µ—Ç –≥–¥–µ –¥–∞—Ç–∞
                    match_data = {}

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                    if date_col_idx == 0:  # –î–∞—Ç–∞ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                        match_data = {
                            'date': texts[0] if len(texts) > 0 else '',
                            'day': texts[1] if len(texts) > 1 else '',
                            'tour': texts[2] if len(texts) > 2 else '',
                            'game_num': texts[3] if len(texts) > 3 else '',
                            'time': texts[4] if len(texts) > 4 else '',
                            'year': texts[5] if len(texts) > 5 else '',
                            'team1': texts[6] if len(texts) > 6 else '',
                            'team2': texts[7] if len(texts) > 7 else '',
                            'arena': texts[8] if len(texts) > 8 else '',
                            'address': texts[10] if len(texts) > 10 else ''
                        }
                    elif date_col_idx == 1:  # –î–µ–Ω—å, –ø–æ—Ç–æ–º –¥–∞—Ç–∞
                        match_data = {
                            'day': texts[0] if len(texts) > 0 else '',
                            'date': texts[1] if len(texts) > 1 else '',
                            'tour': texts[2] if len(texts) > 2 else '',
                            'game_num': texts[3] if len(texts) > 3 else '',
                            'time': texts[4] if len(texts) > 4 else '',
                            'year': texts[5] if len(texts) > 5 else '',
                            'team1': texts[6] if len(texts) > 6 else '',
                            'team2': texts[7] if len(texts) > 7 else '',
                            'arena': texts[8] if len(texts) > 8 else '',
                            'address': texts[10] if len(texts) > 10 else ''
                        }

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –±—É–¥—É—â–∏–π –º–∞—Ç—á
                    match_date = parse_date_str(match_data['date'])
                    if not match_date or match_date <= date.today():
                        continue

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—É –∫–æ–º–∞–Ω–¥
                    pair = f"{match_data['team1']} - {match_data['team2']}"

                    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
                    match = {
                        'day': match_data['day'],
                        'date': match_data['date'],
                        'tour': match_data['tour'],
                        'game_num': match_data['game_num'],
                        'time': match_data['time'],
                        'year': match_data['year'],
                        'pair': pair,
                        'name': '–ü–µ—Ä–≤–µ–Ω—Å—Ç–≤–æ –ú–æ—Å–∫–≤—ã',
                        'arena': match_data['arena'],
                        'map': 'https://yandex.ru/maps/',
                        'address': match_data['address']
                    }

                    matches.append(match)
                    logger.info(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–∞—Ç—á: {pair} ({match_data['date']})")

                except Exception as e:
                    logger.debug(f"  –°—Ç—Ä–æ–∫–∞ {row_idx} –Ω–µ –ø–æ–¥–æ—à–ª–∞: {e}")
                    continue

            logger.info(f"‚úÖ –°–ø–∞—Ä—Å–µ–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π")

            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if len(matches) == 0:
                logger.warning("‚ö†Ô∏è –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
                page.screenshot(path='detailed_screenshot.png', full_page=True)
                logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω detailed_screenshot.png (–ø–æ–ª–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            page.screenshot(path='error_screenshot.png', full_page=True)
            with open('error_page.html', 'w', encoding='utf-8') as f:
                f.write(page.content())
            raise
        finally:
            browser.close()

    return matches


def save_to_json(matches, filename=OUTPUT_FILE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON"""
    arenas = sorted(list(set(m['arena'] for m in matches if m['arena'])))

    data = {
        'matches': matches,
        'arenas': arenas,
        'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
        'total_matches': len(matches)
    }

    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
    logger.info(f"üìä –ú–∞—Ç—á–µ–π: {len(matches)} | –ê—Ä–µ–Ω: {len(arenas)}")


def main():
    try:
        logger.info("=" * 60)
        logger.info("FHM Calendar Parser v4 - –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è")
        logger.info("=" * 60)

        matches = parse_matches()

        if not matches:
            logger.error("‚ùå –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            logger.info("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:")
            logger.info("  - full_page.html")
            logger.info("  - detailed_screenshot.png")
            # –ù–µ –ø–∞–¥–∞–µ–º, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π JSON
            save_to_json([])
            return

        save_to_json(matches)

        logger.info("=" * 60)
        logger.info("‚úÖ –ì–æ—Ç–æ–≤–æ!")
        logger.info("=" * 60)

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π JSON —á—Ç–æ–±—ã —Å–∞–π—Ç –Ω–µ —Å–ª–æ–º–∞–ª—Å—è
        try:
            save_to_json([])
        except:
            pass
        raise


if __name__ == '__main__':
    main()
