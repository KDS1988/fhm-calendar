from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
import json
import os
from datetime import datetime
from parser import parse_vsporte

app = FastAPI(title="FHM VSporte Parser API")

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í production —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—É—Ç—å –∫ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
DATA_FILE = "data/matches.json"
CACHE_HOURS = 1  # –û–±–Ω–æ–≤–ª—è—Ç—å –∫–µ—à —Ä–∞–∑ –≤ —á–∞—Å

def get_cached_data():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ –∏–ª–∏ —Å–ø–∞—Ä—Å–∏—Ç—å –∑–∞–Ω–æ–≤–æ"""
    if os.path.exists(DATA_FILE):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–∞
        file_age = datetime.now().timestamp() - os.path.getmtime(DATA_FILE)
        if file_age < CACHE_HOURS * 3600:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)

    # –ü–∞—Ä—Å–∏–º –∑–∞–Ω–æ–≤–æ
    print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
    data = parse_vsporte()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    os.makedirs("data", exist_ok=True)
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    return data

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± API"""
    return {
        "name": "FHM VSporte Parser API",
        "version": "1.0.0",
        "endpoints": {
            "/api/matches": "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—Ç—á–∏",
            "/api/refresh": "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
            "/health": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"
        }
    }

@app.get("/api/matches")
async def get_matches():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π"""
    try:
        data = get_cached_data()
        return {
            "success": True,
            "count": len(data),
            "data": data,
            "updated_at": datetime.fromtimestamp(
                os.path.getmtime(DATA_FILE)
            ).isoformat() if os.path.exists(DATA_FILE) else None
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/refresh")
async def refresh_data():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"""
    try:
        # –£–¥–∞–ª—è–µ–º –∫–µ—à
        if os.path.exists(DATA_FILE):
            os.remove(DATA_FILE)

        # –ü–∞—Ä—Å–∏–º –∑–∞–Ω–æ–≤–æ
        data = get_cached_data()

        return {
            "success": True,
            "message": "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            "count": len(data),
            "updated_at": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat()
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
