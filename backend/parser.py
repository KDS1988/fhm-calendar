from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError
import json
from datetime import date, datetime, timedelta
import os

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
LOGIN_URL = 'http://referee.fhmoscow.com/adm/index.php'
TARGET_URL = 'http://referee.fhmoscow.com/adm/vsporte.php'
LOGIN = os.getenv('FHMO_LOGIN', 'VSporte')
PASSWORD = os.getenv('FHMO_PASS', '12345')

def parse_date_str(date_str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ 1.10.2025 –∏–ª–∏ 01.10.2025"""
    try:
        d, m, y = map(int, str(date_str).strip().split('.'))
        return date(y, m, d)
    except:
        return None

def parse_vsporte():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π"""
    with sync_playwright() as p:
        print("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        browser = p.chromium.launch(headless=True)
        context = browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        )
        page = context.new_page()

        try:
            print("üîê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...")
            for attempt in range(3):
                try:
                    page.goto(LOGIN_URL, timeout=30000)
                    page.wait_for_load_state('domcontentloaded')
                    print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    break
                except PlaywrightTimeoutError:
                    print(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    if attempt == 2:
                        raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")

            print("üìù –í–≤–æ–¥–∏–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å...")
            page.fill('input[name="login"]', LOGIN)
            page.fill('input[name="password"]', PASSWORD)

            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            print("üñ± –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...")
            selectors = [
                'input[type="submit"]',
                'input[value="–í–æ–π—Ç–∏"]',
                'button[type="submit"]',
            ]

            button_clicked = False
            for selector in selectors:
                try:
                    if page.locator(selector).is_visible():
                        page.locator(selector).click()
                        button_clicked = True
                        break
                except:
                    continue

            if not button_clicked:
                raise Exception("‚ùå –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            page.wait_for_timeout(2000)

            print("‚è≥ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ vsporte.php...")
            page.goto(TARGET_URL, timeout=30000)
            page.wait_for_load_state('domcontentloaded')

            # –ñ–¥—ë–º —Ç–∞–±–ª–∏—Ü—É
            print("‚è≥ –û–∂–∏–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É '–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò'...")
            page.wait_for_function("""
                () => {
                    const th = Array.from(document.querySelectorAll('th'))
                        .find(el => el.textContent.includes('–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò'));
                    if (!th) return false;
                    const table = th.closest('table');
                    const rows = table.querySelectorAll('tr:has(td)');
                    return rows.length > 0;
                }
            """, timeout=15000)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            table_locator = page.locator('//th[contains(., "–ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ê–¢–ß–ò")]/ancestor::table')
            row_locators = table_locator.locator('tr:has(td)').all()
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏: {len(row_locators)}")

            data = []

            for row in row_locators:
                cells = row.locator('td').all()
                if len(cells) < 8:
                    continue

                texts = [cell.inner_text().strip() for cell in cells]

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—É –∫–æ–º–∞–Ω–¥
                pair = " ‚Äì ".join(filter(None, [texts[6], texts[7]])) if len(texts) > 7 else ""

                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                date_str = texts[1] if len(texts) > 1 else ""
                parsed_date = parse_date_str(date_str)
                formatted_date = parsed_date.strftime('%d.%m.%Y') if parsed_date else date_str

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç
                match_data = {
                    "day": texts[0] if len(texts) > 0 else "",
                    "date": formatted_date,
                    "tour": texts[2] if len(texts) > 2 else "",
                    "game_number": texts[3] if len(texts) > 3 else "",
                    "time": texts[4] if len(texts) > 4 else "",
                    "year": texts[5] if len(texts) > 5 else "",
                    "pair": pair,
                    "name": texts[8] if len(texts) > 8 else "",
                    "map_link": texts[9] if len(texts) > 9 else "",
                    "address": texts[10] if len(texts) > 10 else ""
                }

                data.append(match_data)

            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(data)}")
            return data

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            try:
                page.screenshot(path="error_screenshot.png")
            except:
                pass
            raise
        finally:
            browser.close()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    result = parse_vsporte()
    print(json.dumps(result, ensure_ascii=False, indent=2))
